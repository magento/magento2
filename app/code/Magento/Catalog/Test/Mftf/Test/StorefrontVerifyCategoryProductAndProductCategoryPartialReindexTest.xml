<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontVerifyCategoryProductAndProductCategoryPartialReindexTest">
        <annotations>
            <features value="Catalog"/>
            <stories value="Product Categories Indexer"/>
            <title value="Verify Category Product and Product Category partial reindex"/>
            <description value="Verify that Merchant Developer can use console commands to perform partial reindex for Category Products, Product Categories, and Catalog Search"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-11386"/>
            <useCaseId value="MAGETWO-88184"/>
            <group value="catalog"/>
            <group value="indexer"/>
            <group value="pr_exclude"/>
            <group value="indexers_by_schedule_mode_only"/>
        </annotations>
        <before>
            <!-- Change "Category Products", "Product Categories" and "Catalog Search" indexers to "Update by Schedule" mode -->
            <comment userInput="Adding the comment to replace 'indexer:set-mode schedule' command for preserving Backward Compatibility" stepKey="setIndexerMode"/>

            <!-- Create categories K, L, M, N with different nesting in the tree and Anchor = Yes/No-->
            <!-- Category K is an anchor category -->
            <createData entity="_defaultCategory" stepKey="categoryK"/>
            <!-- Category L is a non-anchor subcategory of category K -->
            <createData entity="SubCategoryNonAnchor" stepKey="categoryL">
                <requiredEntity createDataKey="categoryK"/>
            </createData>
            <!-- Category M is a subcategory of category L -->
            <createData entity="SubCategoryWithParent" stepKey="categoryM">
                <requiredEntity createDataKey="categoryL"/>
            </createData>
            <!-- Category N is a subcategory of category K -->
            <createData entity="SubCategoryWithParent" stepKey="categoryN">
                <requiredEntity createDataKey="categoryK"/>
            </createData>

            <!-- Create different Products with different settings, assign to categories: -->
            <!-- Product A in 0 categories, i.e. not assigned to any category -->
            <createData entity="SimpleProduct2" stepKey="productA"/>
            <!-- Product B in 1 category M -->
            <createData entity="SimpleProduct3" stepKey="productB">
                <requiredEntity createDataKey="categoryM"/>
            </createData>
            <!-- Product C in 2 categories M and N -->
            <createData entity="SimpleProduct2" stepKey="productC"/>
            <createData entity="AssignProductToCategory" stepKey="assignCategoryMToProductC">
                <requiredEntity createDataKey="categoryM"/>
                <requiredEntity createDataKey="productC"/>
            </createData>
            <createData entity="AssignProductToCategory" stepKey="assignCategoryNToProductC">
                <requiredEntity createDataKey="categoryN"/>
                <requiredEntity createDataKey="productC"/>
            </createData>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindexInvalidatedIndices">
                <argument name="indices" value=""/>
            </actionGroup>
        </before>
        <after>
            <!-- Change indexers to "Update on Save" mode -->
            <comment userInput="Adding the comment to replace 'indexer:set-mode realtime' command for preserving Backward Compatibility" stepKey="setRealtimeMode"/>

            <!-- Delete data -->
            <deleteData createDataKey="productA" stepKey="deleteProductA"/>
            <deleteData createDataKey="productB" stepKey="deleteProductB"/>
            <deleteData createDataKey="productC" stepKey="deleteProductC"/>
            <deleteData createDataKey="categoryN" stepKey="deleteCategoryN"/>
            <deleteData createDataKey="categoryM" stepKey="deleteCategoryM"/>
            <deleteData createDataKey="categoryL" stepKey="deleteCategoryL"/>
            <deleteData createDataKey="categoryK" stepKey="deleteCategoryK"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindexInvalidatedIndices">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!-- Open categories K, L, M, N on Storefront -->
        <!-- Category K contains only Products B & C -->
        <actionGroup ref="StorefrontNavigateCategoryPageActionGroup" stepKey="onCategoryK">
            <argument name="category" value="$$categoryK$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductBOnCategoryK">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCOnCategoryK">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAOnCategoryK">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>

        <!-- Category L contains no Products -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$)}}" stepKey="onCategoryL"/>
        <actionGroup ref="AssertStorefrontNoProductsFoundActionGroup" stepKey="seeMessage"/>
        <dontSeeElement selector="{{StorefrontCategoryMainSection.productName}}" stepKey="dontseeProducts"/>

        <!-- Category M contains only Products B & C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$/$categoryM.custom_attributes[url_key]$)}}" stepKey="onCategoryM"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductBOnCategoryM">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCOnCategoryM">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAOnCategoryM">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>

        <!-- Category N contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryN.custom_attributes[url_key]$)}}" stepKey="onCategoryN"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCOnCategoryN">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAOnCategoryN">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductBOnCategoryN">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!--  Assign category K to Product A -->
        <createData entity="AssignProductToCategory" stepKey="assignCategoryKToProductA">
            <requiredEntity createDataKey="categoryK"/>
            <requiredEntity createDataKey="productA"/>
        </createData>

        <!--  Unassign category M from Product B -->
        <deleteData url="/V1/categories/$categoryM.id$/products/$productB.sku$" stepKey="unassignCategoryMFromProductB"/>

        <!--  Assign category L to Product C -->
        <createData entity="AssignProductToCategory" stepKey="assignCategoryLToProductC">
            <requiredEntity createDataKey="categoryL"/>
            <requiredEntity createDataKey="productC"/>
        </createData>

        <!-- Open categories K, L, M, N on Storefront in order to make sure that new assignments are not applied yet -->
        <!-- Category K contains only Products B & C -->
        <actionGroup ref="StorefrontNavigateCategoryPageActionGroup" stepKey="amOnCategoryK">
            <argument name="category" value="$$categoryK$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductBCategoryK">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCCategoryK">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductACategoryN">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>

        <!-- Category L contains no Products -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$)}}" stepKey="amOnCategoryL"/>
        <!--<see userInput="We can't find products matching the selection." selector="{{StorefrontCategoryMainSection.emptyProductMessage}}" stepKey="seeEmptyMessage"/>-->
        <actionGroup ref="AssertStorefrontNoProductsFoundActionGroup" stepKey="seeEmptyMessage"/>
        <dontSeeElement selector="{{StorefrontCategoryMainSection.productName}}" stepKey="dontseeProduct"/>

        <!-- Category M contains only Products B & C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$/$categoryM.custom_attributes[url_key]$)}}" stepKey="amOnCategoryM"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductBCategoryM">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCCategoryM">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAInCategoryM">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>

        <!-- Category N contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryN.custom_attributes[url_key]$)}}" stepKey="amOnCategoryN"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductInCategoryN">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAInCategoryN">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductBInCategoryN">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Run cron -->
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="runCronIndex">
            <argument name="indices" value=""/>
        </actionGroup>

        <!-- Open categories K, L, M, N on Storefront in order to make sure that new assignments are applied -->
        <!-- Category K contains only Products A, C -->
        <actionGroup ref="StorefrontNavigateCategoryPageActionGroup" stepKey="storefrontCategoryK">
            <argument name="category" value="$$categoryK$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductAOnCategoryK">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeCategoryKWithProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryKWithProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category L contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$)}}" stepKey="storefrontCategoryL"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeCategoryLWithProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryLWithProductA">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryLWithProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category M contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$/$categoryM.custom_attributes[url_key]$)}}" stepKey="storefrontCategoryM"/>
        <waitForPageLoad stepKey="waitForStorefrontCategoryM"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeCategoryMAndProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryMAndProductA">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryMAndProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category N contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryN.custom_attributes[url_key]$)}}" stepKey="storefrontCategoryN"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCAndCategoryN">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAAndCategoryN">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductBAndCategoryN">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Remove Product A assignment for category K -->
        <deleteData url="/V1/categories/$categoryK.id$/products/$productA.sku$" stepKey="unassignCategoryKFromProductA"/>

        <!-- Remove Product C assignment for category L -->
        <deleteData url="/V1/categories/$categoryL.id$/products/$productC.sku$" stepKey="unassignCategoryLFromProductC"/>

        <!-- Add Product B assignment for category N -->
        <createData entity="AssignProductToCategory" stepKey="assignCategoryNToProductB">
            <requiredEntity createDataKey="categoryN"/>
            <requiredEntity createDataKey="productB"/>
        </createData>

        <!-- Open categories K, L, M, N on Storefront in order to make sure that new assignments are not applied yet -->
        <!-- Category K contains only Products A, C -->
        <actionGroup ref="StorefrontNavigateCategoryPageActionGroup" stepKey="onStorefrontCategoryK">
            <argument name="category" value="$$categoryK$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductAWithCategoryK">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category L contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$)}}" stepKey="onStorefrontCategoryL"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeCategoryLAndProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryLAndProductA">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryLAndProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category M contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$/$categoryM.custom_attributes[url_key]$)}}" stepKey="onStorefrontCategoryM"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeCategoryMWithProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryMWithProductA">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryMWithProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category N contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryN.custom_attributes[url_key]$)}}" stepKey="onStorefrontCategoryN"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="productCOnCategoryN">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAOnTheCategoryN">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductBOnTheCategoryN">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Reindex product changes -->
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="runCronIndex2">
            <argument name="indices" value=""/>
        </actionGroup>

        <!-- Open categories K, L, M, N on Storefront in order to make sure that new assignments are applied -->

        <!-- Category K contains only Products B & C -->
        <actionGroup ref="StorefrontNavigateCategoryPageActionGroup" stepKey="onFrontendCategoryK">
            <argument name="category" value="$$categoryK$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="productBOnCategoryK">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="productCOnCategoryK">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAOnTheCategoryK">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>


        <!-- Category L contains no Products -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$)}}" stepKey="onFrontendCategoryL"/>
        <actionGroup ref="AssertStorefrontNoProductsFoundActionGroup" stepKey="noProductsMessage"/>
        <dontSeeElement selector="{{StorefrontCategoryMainSection.productName}}" stepKey="dontSeeProductsOnCategoryL"/>

        <!-- Category M contains only Product C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryL.custom_attributes[url_key]$/$categoryM.custom_attributes[url_key]$)}}" stepKey="onFrontendCategoryM"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeCategoryMPageAndProductC">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryMPageAndProductA">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeCategoryMPageAndProductB">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>

        <!-- Category N contains only Products B and C -->
        <amOnPage url="{{StorefrontCategoryPage.url($categoryK.custom_attributes[url_key]$/$categoryN.custom_attributes[url_key]$)}}" stepKey="onFrontendCategoryN"/>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductBAndCategoryN">
            <argument name="productName" value="$productB.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontAssertProductNameOnProductMainPageActionGroup" stepKey="seeProductCCategoryN">
            <argument name="productName" value="$productC.name$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontSeeProductAWithCategoryN">
            <argument name="productName" value="$productA.name$"/>
        </actionGroup>
    </test>
</tests>
