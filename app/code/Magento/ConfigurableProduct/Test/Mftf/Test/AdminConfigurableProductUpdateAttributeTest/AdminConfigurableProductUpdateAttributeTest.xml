<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminConfigurableProductUpdateAttributeTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Edit a configurable product in admin"/>
            <title value="Admin should be able to update existing attributes of a configurable product"/>
            <description value="Admin should be able to update existing attributes of a configurable product"/>
            <severity value="AVERAGE"/>
            <testCaseId value="MC-179"/>
            <group value="ConfigurableProduct"/>
        </annotations>

        <before>
            <!-- Create the attribute we will be modifying -->
            <createData entity="productAttributeWithTwoOptions" stepKey="createModifiableProductAttribute"/>

            <!-- Create the two attributes the product will have -->
            <createData entity="productAttributeOption1" stepKey="createModifiableProductAttributeOption1">
                <requiredEntity createDataKey="createModifiableProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createModifiableProductAttributeOption2">
                <requiredEntity createDataKey="createModifiableProductAttribute"/>
            </createData>

            <!-- Add the product to the default set -->
            <createData entity="AddToDefaultSet" stepKey="createModifiableAddToAttributeSet">
                <requiredEntity createDataKey="createModifiableProductAttribute"/>
            </createData>

            <!-- TODO: This should be converted to an actionGroup once MQE-993 is fixed. -->
            <!-- Create the category the product will be a part of -->
            <createData entity="ApiCategory" stepKey="createCategory"/>
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>

            <!-- Create the two attributes the product will have -->
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Add the product to the default set -->
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Get the two attributes -->
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create the two children product -->
            <createData entity="ApiSimpleOne" stepKey="createConfigChildProduct1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>
            <createData entity="ApiSimpleTwo" stepKey="createConfigChildProduct2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>

            <!-- Create the two configurable product with both children -->
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild2">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct2"/>
            </createData>

            <!-- login -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="login"/>
        </before>

        <after>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="adminLogout"/>

            <!-- Delete everything that was created in the before block -->
            <deleteData createDataKey="createCategory" stepKey="deleteCatagory"/>
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigProduct"/>
            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteConfigChildProduct1"/>
            <deleteData createDataKey="createConfigChildProduct2" stepKey="deleteConfigChildProduct2"/>
            <deleteData createDataKey="createModifiableProductAttribute" stepKey="deleteModifiableProductAttribute"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>

            <!-- Reindex invalidated indices after product attribute has been created/deleted -->
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindexInvalidatedIndices">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!-- Get the current option of the attribute before it was changed -->
        <amOnPage url="/{{ApiConfigurableProduct.urlKey}}2.html" stepKey="goToConfigProductPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontProductPageLoad"/>

        <grabTextFrom stepKey="getBeforeOption" selector="{{StorefrontProductInfoMainSection.nthAttributeOnPage('1')}}"/>

        <!-- Find the product that we just created using the product grid -->
        <actionGroup ref="AdminOpenProductIndexPageActionGroup" stepKey="visitAdminProductPage"/>
        <conditionalClick selector="{{AdminProductGridFilterSection.clearFilters}}" dependentSelector="{{AdminProductGridFilterSection.clearFilters}}" visible="true" stepKey="clickClearFiltersInitial"/>
        <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="findCreatedProduct">
            <argument name="product" value="ApiConfigurableProduct"/>
        </actionGroup>
        <waitForPageLoad stepKey="waitForProductFilterLoad"/>
        <actionGroup ref="AdminProductGridSectionClickFirstRowActionGroup" stepKey="clickOnProductPage"/>

        <!-- change the option on the first attribute -->
        <selectOption stepKey="clickFirstAttribute" selector="{{ModifyAttributes.nthExistingAttribute($$createModifiableProductAttribute.default_frontend_label$$)}}" userInput="option1"/>

        <!-- Save the product -->
        <actionGroup ref="AdminProductFormSaveButtonClickActionGroup" stepKey="saveProductAttribute"/>
        <actionGroup ref="AssertMessageInAdminPanelActionGroup" stepKey="assertSuccess">
            <argument name="message" value="You saved the product."/>
        </actionGroup>

        <!-- Go back to the configurable product page and check to see if it has changed -->
        <amOnPage url="/{{ApiConfigurableProduct.urlKey}}2.html" stepKey="goToConfigProductPage2"/>
        <waitForPageLoad stepKey="waitForStoreFrontProductPageLoad2"/>
        <grabTextFrom stepKey="getCurrentOption" selector="{{StorefrontProductInfoMainSection.nthAttributeOnPage('1')}}"/>
        <assertNotEquals stepKey="assertNotEquals">
			<actualResult type="string">{$getCurrentOption}</actualResult>
			<expectedResult type="string">{$getBeforeOption}</expectedResult>
        </assertNotEquals>

    </test>
</tests>
