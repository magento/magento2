<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminExportSimpleAndConfigurableProductsWithCustomOptionsTest">
        <annotations>
            <features value="CatalogImportExport"/>
            <stories value="Export Products"/>
            <title value="Export Simple and Configurable Products with Custom Options"/>
            <description value="Verifies that a user can export a Configurable product with child simple products with
            custom options. Verifies that the exported file and the downloadable copy of the exported file contain the
            expected product (a filter is applied when exporting such that ONLY the configurable product row should be
            in the export). Note that MFTF cannot simply download a file and have access to it due to the test not
            having access to the server that is running the test browser. Therefore, this test verifies that the
            Download button can be successfully clicked, grabs the request URL from the Download button, executes the
            request on the magento machine via a curl request, and verifies the contents of the downloaded file."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14005"/>
            <group value="catalog_import_export"/>
            <group value="mtf_migrated"/>
            <group value="pr_exclude"/>
        </annotations>

        <before>
            <!-- Create category -->
            <createData entity="SimpleSubCategory" stepKey="createCategory"/>

            <!-- Create configurable product with two attributes -->
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeFirstOption">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeSecondOption">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeFirstOption">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeSecondOption">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Add custom options to configurable product -->
            <updateData createDataKey="createConfigProduct" entity="productWithOptions" stepKey="updateProductWithOptions"/>

            <!-- Create two simple product which will be the part of configurable product -->
            <createData entity="ApiSimpleOne" stepKey="createConfigFirstChildProduct">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeFirstOption"/>
            </createData>
            <createData entity="ApiSimpleTwo" stepKey="createConfigSecondChildProduct">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeSecondOption"/>
            </createData>
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeFirstOption"/>
                <requiredEntity createDataKey="getConfigAttributeSecondOption"/>
            </createData>

            <!-- Add created below children products to configurable product -->
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddFirstChild">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigFirstChildProduct"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddSecondChild">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigSecondChildProduct"/>
            </createData>

            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="runCronIndex">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>

        <after>
            <!-- Delete configurable product creation -->
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigProduct"/>
            <deleteData createDataKey="createConfigFirstChildProduct" stepKey="deleteConfigFirstChildProduct"/>
            <deleteData createDataKey="createConfigSecondChildProduct" stepKey="deleteConfigSecondChildProduct"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <helper class="\Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="deleteDirectory" stepKey="deleteExportFileDirectory">
                <argument name="path">var/export</argument>
            </helper>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindexInvalidatedIndices">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!-- Export Created Products -->
        <actionGroup ref="AdminNavigateToExportPageActionGroup" stepKey="goToExportIndexPage"/>
        <comment userInput="BIC workaround" stepKey="waitForExportIndexPageLoad"/>
        <actionGroup ref="ExportProductsFilterByAttributeActionGroup" stepKey="exportProductBySku">
            <argument name="attribute" value="sku"/>
            <argument name="attributeData" value="$$createConfigProduct.sku$$"/>
        </actionGroup>

        <!-- Start Message Queue for Export Consumer -->
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueue">
            <argument name="consumerName" value="{{AdminExportMessageConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AdminExportMessageConsumerData.messageLimit}}"/>
        </actionGroup>
        <actionGroup ref="ReloadPageActionGroup" stepKey="refreshPage"/>
        <comment userInput="Replacing reload action and preserve Backward Compatibility" stepKey="waitForReload"/>
        <waitForElementVisible selector="{{AdminExportAttributeSection.exportFileNameByPosition('0')}}" stepKey="waitForFileName"/>
        <grabTextFrom selector="{{AdminExportAttributeSection.exportFileNameByPosition('0')}}" stepKey="getFilename"/>
        <actionGroup ref="AdminGetExportFilenameOnServerActionGroup" stepKey="grabNameFile">
            <argument name="rowIndex" value="0"/>
        </actionGroup>

        <!-- Validate Export File on File System: Product with Custom Options -->
        <helper class="Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileExists" stepKey="assertExportFileExists">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
        </helper>
        <helper class="Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsConfigurableProduct">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
            <argument name="text">$$createConfigProduct.name$$</argument>
        </helper>
        <helper class="Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsFirstChildSimpleProductOption">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
            <argument name="text">sku=$$createConfigFirstChildProduct.sku$$,$$createConfigProductAttribute.attribute_code$$=option1</argument>
        </helper>
        <helper class="Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsSecondChildSimpleProductOption">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
            <argument name="text">sku=$$createConfigSecondChildProduct.sku$$,$$createConfigProductAttribute.attribute_code$$=option2</argument>
        </helper>
        <helper class="Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileDoesNotContainString" stepKey="assertExportFileDoesNotContainFirstSimpleProduct">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
            <argument name="text">$$createConfigFirstChildProduct.name$$</argument>
        </helper>
        <helper class="Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileDoesNotContainString" stepKey="assertExportFileDoesNotContainSecondSimpleProduct">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
            <argument name="text">$$createConfigSecondChildProduct.name$$</argument>
        </helper>

        <!-- Download Export File -->
        <actionGroup ref="DownloadFileActionGroup" stepKey="downloadCreatedProducts">
            <argument name="fileName" value="{$getFilename}"/>
        </actionGroup>

        <!-- Validate Downloaded Export File: Product with Custom Options -->
        <grabAttributeFrom userInput="href" selector="{{AdminExportAttributeSection.download('0')}}" stepKey="grabExportUrl"/>
        <helper class="\Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsConfigurableProduct">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">$$createConfigProduct.name$$</argument>
        </helper>
        <helper class="\Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsFirstChildSimpleProductOption">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">sku=$$createConfigFirstChildProduct.sku$$,$$createConfigProductAttribute.attribute_code$$=option1</argument>
        </helper>
        <helper class="\Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsSecondChildSimpleProductOption">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">sku=$$createConfigSecondChildProduct.sku$$,$$createConfigProductAttribute.attribute_code$$=option2</argument>
        </helper>
        <helper class="\Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseDoesNotContainString" stepKey="assertDownloadFileDoesNotContainFirstSimpleProduct">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">$$createConfigFirstChildProduct.name$$</argument>
        </helper>
        <helper class="\Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseDoesNotContainString" stepKey="assertDownloadFileDoesNotContainSecondSimpleProduct">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">$$createConfigSecondChildProduct.name$$</argument>
        </helper>

        <!-- Delete Export File -->
        <actionGroup ref="DeleteExportedFileActionGroup" stepKey="deleteExportedFile">
            <argument name="fileName" value="{$getFilename}"/>
        </actionGroup>
        <helper class="\Magento\Catalog\Test\Mftf\Helper\LocalFileAssertions" method="assertFileDoesNotExist" stepKey="assertExportFileDeleted">
            <argument name="filePath">var/export/{$grabNameFile}</argument>
        </helper>
    </test>
</tests>
