<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontDeleteDownloadableProductFromMiniShoppingCartTest">
        <annotations>
            <stories value="DeleteConfigurableProduct"/>
            <title value="Storefront Delete Downloadable Product From Mini Shopping Cart Test"/>
            <description value="Test log in to Shopping Cart and Delete Downloadable Product From Mini Shopping Cart Test"/>
            <testCaseId value="MC-14683"/>
            <severity value="CRITICAL"/>
            <group value="Shopping Cart"/>
            <group value="mtf_migrated"/>
        </annotations>

        <before>
            <magentoCLI stepKey="addDownloadableDomain" command="downloadable:domains:add example.com static.magento.com"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="LoginAsAdmin"/>
            <magentoCLI command="config:set {{EnableFlatRateConfigData.path}} {{EnableFlatRateConfigData.value}}" stepKey="enableFlatRate"/>
            <magentoCLI command="config:set {{EnableFlatRateDefaultPriceConfigData.path}} {{EnableFlatRateDefaultPriceConfigData.value}}" stepKey="enableFlatRateDefaultPrice"/>
            <createData entity="ApiDownloadableProduct" stepKey="createDownloadableProduct"/>
            <createData entity="downloadableLink1" stepKey="addDownloadableLink1">
                <requiredEntity createDataKey="createDownloadableProduct"/>
            </createData>
            <comment userInput="Adding the comment to replace CliIndexerReindexActionGroup action group ('indexer:reindex' commands) for preserving Backward Compatibility" stepKey="reindex"/>
            <comment userInput="Adding the comment to replace CliCacheFlushActionGroup action group ('cache:flush' command) for preserving Backward Compatibility" stepKey="flushCache"/>
        </before>
        <after>
            <magentoCLI stepKey="removeDownloadableDomain" command="downloadable:domains:remove example.com static.magento.com"/>
            <deleteData createDataKey="createDownloadableProduct" stepKey="deleteProduct"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!-- Open Downloadable Product page -->
        <amOnPage url="{{StorefrontProductPage.url($$createDownloadableProduct.custom_attributes[url_key]$$)}}" stepKey="OpenStoreFrontProductPage"/>
        <waitForPageLoad stepKey="waitForPageToLoad"/>

        <!-- Add Downloadable product to the cart -->
        <actionGroup ref="StorefrontAddToCartCustomOptionsProductPageActionGroup" stepKey="addToTheCart">
            <argument name="productName" value="$$createDownloadableProduct.name$$" />
        </actionGroup>

        <!-- Select Mini Cart and select 'View And Edit Cart' -->
        <actionGroup ref="ClickViewAndEditCartFromMiniCartActionGroup" stepKey="selectViewAndEditCart"/>

        <!-- Assert product details in Mini Cart -->
        <actionGroup ref="StorefrontClickOnMiniCartActionGroup" stepKey="clickOnMiniCart"/>
        <actionGroup ref="AssertStorefrontMiniCartItemsActionGroup" stepKey="assertMiniCart">
            <argument name="productName" value="$$createDownloadableProduct.name$$"/>
            <argument name="productPrice" value="$123.00"/>
            <argument name="cartSubtotal" value="123.00" />
            <argument name="qty" value="1"/>
        </actionGroup>

        <!-- Select Mini Cart and select 'View And Edit Cart' -->
        <actionGroup ref="AssertOneProductNameInMiniCartActionGroup" stepKey="seeProductInMiniCart">
            <argument name="productName" value="$$createDownloadableProduct.name$$"/>
        </actionGroup>

        <!--Remove an item from the cart using minicart-->
        <actionGroup ref="RemoveProductFromMiniCartActionGroup" stepKey="removeProductFromMiniCart">
            <argument name="productName" value="$$createDownloadableProduct.name$$"/>
        </actionGroup>
        <actionGroup ref="ReloadPageActionGroup" stepKey="reloadPage"/>

        <!--Check the minicart is empty and verify AssertProductAbsentInMiniShoppingCart-->
        <actionGroup ref="AssertMiniCartEmptyActionGroup" stepKey="miniCartEnpty"/>
        <dontSee selector="{{StorefrontMinicartSection.productLinkByName($$createDownloadableProduct.name$$)}}" stepKey="verifyAssertProductAbsentInMiniShoppingCart"/>
    </test>
</tests>
